alloy:
  alloy:
    configMap:
      content: |
        livedebugging {
          enabled = true
        }

        logging {
          level = "info"
          format = "logfmt"
        }

        discovery.kubernetes "pods" {
          role = "pod"
        }

        discovery.kubernetes "nodes" {
          role = "node"
        }

        discovery.kubernetes "services" {
          role = "service"
        }

        discovery.kubernetes "endpoints" {
          role = "endpoint"
        }
        
        discovery.kubernetes "endpointslices" {
          role = "endpointslice"
        }

        discovery.kubernetes "ingresses" {
          role = "ingress"
        }

        prometheus.exporter.cadvisor "default" {}

        prometheus.scrape "cadvisor" {
          targets    = prometheus.exporter.cadvisor.default.targets
          forward_to = [ prometheus.remote_write.default.receiver ]
        }

        prometheus.scrape "argocd" {
          targets    = [
            {"__address__" = "bootstrap-argocd-application-controller-metrics.argocd.svc.cluster.local:8082", "instance" = "argocd"},
            {"__address__" = "lgtm-tempo-metrics-generator.lgtm.svc.cluster.local:3100", "instance" = "tempo-metrics-generator"},
          ]
          forward_to = [ prometheus.remote_write.default.receiver ]
        }

        prometheus.remote_write "default" {
          endpoint {
            url     = "http://lgtm-mimir-distributor.lgtm.svc.cluster.local:8080/api/v1/push"
            headers = {
              "X-Scope-OrgID" = "anonymous",
            }
          }
        }

        loki.write "default" {
          endpoint {
            url = "http://lgtm-loki.lgtm.svc.cluster.local:3100/loki/api/v1/push"
          }
        }
        
        otelcol.exporter.otlphttp "default" {
          client {
            endpoint = "http://lgtm-tempo-distributor.lgtm.svc.cluster.local:4318"
          }
        }

        otelcol.exporter.prometheus "default" {
          forward_to = [ prometheus.remote_write.default.receiver ]
        }

        otelcol.exporter.loki "default" {
          forward_to = [loki.write.default.receiver]
        }

        otelcol.receiver.otlp "default" {
          grpc {}
          http {}
          output {
            metrics = [ otelcol.exporter.prometheus.default.input ]
            traces  = [ otelcol.exporter.otlphttp.default.sender ]
            logs    = [ loki.write.default.sender ]
          }
        }

